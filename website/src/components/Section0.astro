---
import { Prism } from "@astrojs/prism";
import fs from "node:fs";
import path from "node:path";

// Configuration for examples dir
const EXAMPLES_DIR = "src/assets/examples";
const exampleDirs = fs
  .readdirSync(EXAMPLES_DIR)
  .filter((dir) => fs.statSync(path.join(EXAMPLES_DIR, dir)).isDirectory());

// Function to extract directory structure from prompt.md
function extractDirectoryTree(promptContent: string) {
  const treeMatch = promptContent.match(/```txt\n([\s\S]*?)```/);
  return treeMatch ? treeMatch[1].trim() : "";
}

// Function to parse prompt.md to get example data
function parsePromptMd(promptPath: string) {
  try {
    const promptContent = fs.readFileSync(promptPath, "utf-8");
    const directoryTree = extractDirectoryTree(promptContent);

    // Extract question if it exists in a separate file
    let question = "";
    const questionPath = path.dirname(promptPath) + "/question.txt";
    if (fs.existsSync(questionPath)) {
      question = fs.readFileSync(questionPath, "utf-8").trim();
    } else {
      // Default to a generated question
      question = `Can you help me understand this project?`;
    }

    return {
      promptContent,
      directoryTree,
      question,
    };
  } catch (error) {
    console.error(`Error parsing prompt.md: ${error}`);
    return null;
  }
}

// Load data for all examples
const examples = exampleDirs
  .map((dir) => {
    const promptPath = path.join(EXAMPLES_DIR, dir, "prompt.md");
    if (fs.existsSync(promptPath)) {
      const data = parsePromptMd(promptPath);
      if (data) {
        return {
          name: dir,
          directoryTree: data.directoryTree,
          prompt: data.question,
          promptContent: data.promptContent.replace(/```txt\n[\s\S]*?```/g, '') // Remove tree section
            .replace(/^```[\s\S]*?```$/gm, function(match) { // Preserve code blocks
              return match;
            })
            .trim()
        };
      }
    }
    return null;
  })
  .filter(Boolean);

// Default to first example
const { defaultTab = 0 } = Astro.props;
---

<section id="what" class="bg-gray-50 py-12">
  <div class="container mx-auto px-4">
    <!-- Tab Navigation -->
    <div class="mb-6">
      <div class="border-b border-gray-200">
        <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="exampleTabs" role="tablist">
          {examples.map((example, index) => (
            <li class="mr-2" role="presentation">
              <button 
                class={`inline-block p-4 rounded-t-lg border-b-2 ${index === defaultTab ? 'border-blue-500 text-blue-600' : 'border-transparent hover:text-gray-600 hover:border-gray-300'}`}
                id={`tab-${index}`}
                data-tabs-target={`#tab-content-${index}`}
                type="button"
                role="tab"
                aria-controls={`tab-content-${index}`}
                aria-selected={index === defaultTab}
                data-index={index}
              >
                {example.name}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>

    <div class="tab-content">
      {examples.map((example, index) => (
        <div 
          class={`tab-pane ${index === defaultTab ? 'block' : 'hidden'}`} 
          id={`tab-content-${index}`}
          role="tabpanel"
          aria-labelledby={`tab-${index}`}
        >
          <div class="flex flex-col md:flex-row md:gap-6">
            <!-- Left Column: Directory Tree -->
            <div class="w-full md:w-1/3 mb-6 md:mb-0 p-4 bg-white rounded-md shadow-md">
              <header class="mb-4 text-gray-800">
                <h2 class="text-2xl font-semibold">Project Structure</h2>
                <p class="text-sm text-gray-600">Example: {example.name}</p>
              </header>
              <div class="text-gray-800">
                <div class="directory-tree ml-0">
                  <pre class="text-sm font-mono whitespace-pre bg-gray-100 p-4 rounded-md overflow-auto">{example.directoryTree}</pre>
                </div>
              </div>
            </div>

            <!-- Right Column: Prompt Output -->
            <div class="w-full md:w-2/3 relative p-4 bg-white rounded-md shadow-md">
              <!-- Question Block -->
              <div class="mb-6">
                <header class="mb-2 text-gray-800">
                  <h3 class="text-xl font-semibold">Question</h3>
                </header>
                <Prism
                  code={example.prompt}
                  lang="markdown"
                  class="overflow-x-auto w-full prism-small-font"
                />
              </div>

              <!-- Code2Prompt Response -->
              <div id="llm-response">
                <header class="mb-2 text-gray-800">
                  <h3 class="text-xl font-semibold">Code2Prompt Output</h3>
                </header>
                <div class="prose max-w-none">
                  <Prism
                    code={example.promptContent}
                    lang="markdown"
                    class="overflow-x-auto w-full prism-small-font"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  /* Directory Tree Styling */
  .directory-tree {
    font-family: monospace;
  }

  /* Make Prism styling consistent */
  :global(pre.astro-code) {
    background-color: #2d2d2d !important;
    padding: 1rem;
    border-radius: 0.375rem;
    overflow-x: auto;
    margin: 0;
  }

  /* Prose settings for markdown content */
  .prose {
    max-width: 100%;
  }

  .prose :global(h1, h2, h3, h4, h5, h6) {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
  }
  
  .prose :global(p) {
    margin-bottom: 1em;
  }
  
  .prose :global(ul, ol) {
    margin-left: 1.5em;
    margin-bottom: 1em;
  }

  .prism-small-font :global(:not(pre) > code[class*="language-"], pre[class*="language-"]) {
    font-size: 0.8em;
  }
</style>

<script>
  // Tabs functionality
  const tabButtons = document.querySelectorAll('[role="tab"]');
  const tabPanes = document.querySelectorAll('.tab-pane');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Hide all tab content
      tabPanes.forEach(pane => {
        pane.classList.add('hidden');
        pane.classList.remove('block');
      });
      
      // Deactivate all tabs
      tabButtons.forEach(tab => {
        tab.classList.remove('border-blue-500', 'text-blue-600');
        tab.classList.add('border-transparent');
        tab.setAttribute('aria-selected', 'false');
      });
      
      // Activate the clicked tab
      button.classList.add('border-blue-500', 'text-blue-600');
      button.classList.remove('border-transparent');
      button.setAttribute('aria-selected', 'true');
      
      // Show the corresponding content
      const index = button.getAttribute('data-index');
      const targetContent = document.getElementById(`tab-content-${index}`);
      if (targetContent) {
        targetContent.classList.add('block');
        targetContent.classList.remove('hidden');
      }
    });
  });
</script>